- Important NixOS options
  - `system.stateVersion`
  - `system.extraDependencies`
- Generating AMIs
- Explain the benefits of using NixOS and (later on) Nix more pervasively
- Go into more detail about what the adoption model looks like
- Continuous integration
- Continuous deployment
- Migrating existing workflows to Nix
- One-step build and publish
- Nix under the hood / Interpretation pipeline
  - Evaluation / Instantiation
  - Derivations
  - Realization
  - Example: Building your own distributed build system
- Setting up distributed builds architecture
- Debugging Nix
  - `nix show-derivation`
  - `nix-diff`
  - Debugging type errors
  - Understanding NixOS modules and overlays (possibly its own section)
- Scaling
  - Instantiation
- Integration testing (i.e. NixOS tests)
- Other forms of testing, too (e.g. Nix builds as tests)
  - Serving test results
- Using Hydra (even if it is shitty)
- Probably include sample repo as companion to the book
- Mine old blog posts, presentations, and tweets for material
- Talk about using stock NixOS services instead of containers
- How to author your own NixOS service
- Project layout - code organization best practices
- Containers
  - Docker containers
  - NixOS containers
  - OCI containers
- Limitations of rollbacks
- Security
  - Software supply chain security
  - Security hardening flags
  - Securing NixOS
- Talk about how to work around restricted network environments
  - i.e. on-premise deployments
- Talk about virtualization
  - Host OS
  - Guest OS
  - Application containers
- How to upgrade everyone within an organization to the same pinned version of
  Nix
- NixOS options
  - How to query NixOS options (e.g. using `nixos-option` or evaluation)
  - How to browse/search NixOS options?
- Manage secrets
- Caching
  - Setting up a cache
  - Uploading to a cache
- Flakes
  - For managing NixOS systems
  - Opening up a flake attribute in `nix repl`
- How to write your own deploy tool
  - i.e. the same as my "NixOS in production" post
- NixOS system administration
- Show an example of embedding code inline within a NixOS configuration file
 - … and also having that code reference NixOS options
 - … and how to deal with the code getting rebuilt if the options changed
- How to distribute and install a patched Nix build
- Brief systemd tutorial
- How to generate NixOS options documentation (and search?)

- Read through various nix CLI commands to see if new functionality was added

- Add exercises

* * *

- "Big picture"
  - Architecture diagram

Things to edit for:

- Consistent Nix version
- Consistent Nixpkgs version
- Correct syntax highlighting for code blocks
- Things that sound like bullshit

- What is NixOS well-suited for
  - NixOS has certain risks in offline environments
- What does a mature NixOS enterprise look like?
- Talk about the broad strategies for getting Nix adopted
  - Using NixOS as the host operating system (the approach this book will cover)
  - Building containers
- Talk about using `system.extraDependencies`
- Generating AMIs
- Explain the benefits of using NixOS and (later on) Nix more pervasively
- Go into more detail about what the adoption model looks like
- Continuous integration
- Continuous deployment
- Migrating existing workflows to Nix
- One-step build and publish
- Nix under the hood / Interpretation pipeline
  - Evaluation / Instantiation
  - Derivations
  - Realization
  - Example: Building your own distributed build system
- Debugging Nix
  - `nix show-derivation`
  - `nix-diff`
  - Debugging type errors
  - Understanding NixOS modules and overlays (possibly its own section)
- Scaling
  - Instantiation
- Integration testing (i.e. NixOS tests)
- Other forms of testing, too (e.g. Nix builds as tests)
  - Serving test results
- Using Hydra (even if it is shitty)
- Probably include sample repo as companion to the book
- Mine old blog posts, presentations, and tweets for material
- Talk about using stock NixOS services instead of containers
- How to author your own NixOS service
- Project layout - code organization best practices
- Containers
  - Docker containers
  - NixOS containers
  - OCI containers
- How to query NixOS options (e.g. using `nixos-option` or evaluation)
- Limitations of rollbacks
- Software supply chain security
- Security hardening
- Talk about how to work around restricted network environments
- Talk about virtualization
  - Host OS
  - Guest OS
  - Application containers

- Read through various nix CLI commands to see if new functionality was added
